"Q4"="lockdown")) %>%
group_by(short_id, question, vote_mechanism) %>%
mutate(score_new=ifelse(score==max(score),1,0))%>%
ungroup()%>%
select("short_id", "question", "option", "vote_mechanism", "score_new") %>%
pivot_wider(names_from = vote_mechanism, values_from = score_new) %>%
unite(`mv, cav, sv, mbc`, c("mv","cav","sv","mbc"), sep=" ") %>%
select(!c("short_id","option")) %>%
add_count(`mv, cav, sv, mbc`, name = "n_overall") %>%
group_by(question) %>%
add_count(`mv, cav, sv, mbc`, name="n_group") %>%
mutate(per =  100 *n_group/sum(n_group)) %>%
filter(n_group>25) %>%
arrange(.,question,n_overall) %>%
ungroup() %>%
mutate(`mv, cav, sv, mbc`=factor(`mv, cav, sv, mbc`,
levels=c("0 0 1 1", "1 0 0 1", "1 0 1 1", "1 0 0 0", "0 0 1 0", "1 1 0 1",
"1 1 0 0", "0 0 0 1", "0 1 0 1", "0 1 1 1", "1 1 1 0", "0 1 1 0",
"1 1 1 1", "0 1 0 0", "0 0 0 0" ))) -> df_temp
rm(list=ls())
getwd()
library(bookdown)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(tidyr)
library(gapminder)
library(xtable)
library(stringr)
library(pander)
library(vote)
library(knitr)
library(scales)
library(RColorBrewer)
library(ordinal)
library(coin)
library(dtwclust)
library(doParallel)
library(RColorBrewer)
library(ggpubr)
library(viridis)
library(rstatix)
library(kableExtra)
library(hrbrthemes)
library(viridis)
library(ggpmisc)
library(forcats)
library(kSamples)
library(dagitty)
library(lavaan)
library(MESS)
library(ggExtra)
library(ggsci)
library(scales)
#https://davidmathlogic.com/colorblind/#%23005AB5-%23DC3220
color_blind_friendly <- c("#FFB000", "#D35FB7", "#005AB5", "#DC3220", "#009E73")
color_blind_friendly2 <- c("#648FFF", "#DC267F","#785EF0","#FE6100", "#FFB000")
df_va_analytics<-rbind(read.csv("data/0723/analytics.csv"),
read.csv("data/0726/analytics.csv"),
read.csv("data/0728/analytics.csv"),
read.csv("data/0729/analytics.csv"))
df_va_stts<-rbind(read.csv("data/0723/states.csv"),
read.csv("data/0726/states.csv"),
read.csv("data/0728/states.csv"),
read.csv("data/0729/states.csv"))
incomplete<-c("12518", "71672", "92828", "84527", "71795", "43263") ## remove participants with incomplete data
df_va_stts<-df_va_stts[!df_va_stts$short_id %in% incomplete,]
length(unique(df_va_stts$short_id)) # should be 125
df_va_analytics$question<-ifelse(df_va_analytics$vote_name==" Vote 01"|df_va_analytics$vote_name==" Vote 02"|df_va_analytics$vote_name==" Vote 03"|df_va_analytics$vote_name==" Vote 04", "Q1",
ifelse(df_va_analytics$vote_name==" Vote 05"|df_va_analytics$vote_name==" Vote 06"|df_va_analytics$vote_name==" Vote 07"|df_va_analytics$vote_name==" Vote 08", "Q2",
ifelse(df_va_analytics$vote_name==" Vote 09"|df_va_analytics$vote_name==" Vote 10"|df_va_analytics$vote_name==" Vote 11"|df_va_analytics$vote_name==" Vote 12", "Q3",
ifelse(df_va_analytics$vote_name==" Vote 13"|df_va_analytics$vote_name==" Vote 14"|df_va_analytics$vote_name==" Vote 15"|df_va_analytics$vote_name==" Vote 16", "Q4",
"undefined"))))
df_va_analytics$vote_name<-str_replace(df_va_analytics$vote_name, " Vote ", "V")
df <- read_csv("data/qualtrics_text.csv")
df <- df[-c(1,2),]
df<-df%>%
filter(Finished=="True") %>%
filter(!short_id %in% unique(df%>%  #8 people took part twice due to an error in recruiting
group_by(short_id)%>%
filter(n()>1)%>%
pull(short_id)))%>%
filter(!short_id %in% incomplete)
#%>%   write.csv(.,file = "df_qualtrics.csv")
mean_age<-round(mean(as.numeric(df$age), na.rm = TRUE), digits = 2)
share_female<-table(df$gender)[1]/sum(table(df$gender))
df_education<-as.data.frame(table(df$education))
share_bachelor<-round((as.numeric(df_education[df_education$Var1=="Bachelor", 2]))/sum(df_education$Freq), digits = 2)
df_va_stts %>% #we have several rows to capture states by second!
group_by(short_id, vote_name) %>%
slice_max(order_by = time, n = 2) %>%
filter(row_number(vote_mechanism) == 1) -> df_va_stts
df_va_stts$state<-ifelse(df_va_stts$state==" [0]", "[1; 0; 0; 0; 0]",ifelse(df_va_stts$state==" [1]", "[0; 1; 0; 0; 0]",ifelse(df_va_stts$state==" [2]", "[0; 0; 1; 0; 0]",ifelse(df_va_stts$state==" [3]", "[0; 0; 0; 1; 0]",ifelse(df_va_stts$state==" [4]", "[0; 0; 0; 0; 1]",df_va_stts$state)))))
df_va_stts$state<-gsub("\\[|\\]", "", df_va_stts$state) #remove [ ]
df_va_stts <- df_va_stts %>% separate(state, c("o1","o2","o3","o4","o5"), ";")
df_va_stts$vote_name<-str_replace(str_trim(df_va_stts$vote_name), "Vote ", "V")
df_va_stts$question<-ifelse(df_va_stts$vote_name=="V01"|df_va_stts$vote_name=="V02"|df_va_stts$vote_name=="V03"|df_va_stts$vote_name=="V04", "Q1",ifelse(df_va_stts$vote_name=="V05"|df_va_stts$vote_name=="V06"|df_va_stts$vote_name=="V07"|df_va_stts$vote_name=="V08", "Q2",ifelse(df_va_stts$vote_name=="V09"|df_va_stts$vote_name=="V10"|df_va_stts$vote_name=="V11"|df_va_stts$vote_name=="V12", "Q3","Q4")))
df_va_stts[,2:6]<-as.data.frame(sapply(df_va_stts[,2:6], as.numeric))
df_va_stts_lng <- gather(df_va_stts, option, score, o1:o5, factor_key=TRUE)
df_va_stts_lng$short_id<-as.factor(df_va_stts_lng$short_id)
df_va_stts_lng$score<-as.numeric(df_va_stts_lng$score)
winner_mv <-df_va_stts_lng %>%
filter(vote_mechanism == " Majority Voting")%>%
group_by(vote_mechanism, question, option) %>%
summarise(sum = sum(score),.groups="drop_last")
winner_mv_max<- winner_mv%>%
group_by(vote_mechanism, question) %>%
filter(sum == max(sum))
winner_ca <-df_va_stts_lng %>%
filter(vote_mechanism == " Combined Approval")%>%
group_by(vote_mechanism, question, option) %>%
summarise(sum = sum(score),.groups="drop_last")
winner_ca_max <-winner_ca%>%
group_by(vote_mechanism, question) %>%
filter(sum == max(sum))
winner_sv<- df_va_stts_lng %>%
filter(vote_mechanism == " Score Voting")%>%
group_by(vote_mechanism, question, option) %>%
summarise(sum = sum(score),.groups="drop_last")
winner_sv_max<-winner_sv%>%
group_by(vote_mechanism, question) %>%
filter(sum == max(sum))
winner_mbc <- df_va_stts_lng %>%
filter(vote_mechanism == " Modified Borda Count")%>%
group_by(vote_mechanism, question, option) %>%
summarise(sum = sum(score),.groups="drop_last")
winner_mbc_max <-winner_mbc%>%
group_by(vote_mechanism, question) %>%
filter(sum == max(sum))
winner<-rbind(t(winner_mv_max[,3]),
t(winner_ca_max[,3]),
t(winner_sv_max[,3]),
t(winner_mbc_max[,3]))
rownames(winner)<-c("mv","cav","sv","mbc")
colnames(winner)<-c("vaccine","icu","protection","lockdown")
winner_temp<-as.data.frame(winner) %>%
mutate(`vaccine`=recode(`vaccine`,
"o1"="side-effects",
"o2"="misuse",
"o3"="discrimination",
"o4"="timely vacc",
"o5"="vaccine effectiveness")) %>%
mutate(`icu`=recode(`icu`,
"o1"="vacc denial",
"o2"="violate lockdown",
"o3"="health self-damage",
"o4"="oldest",
"o5"="youngest")) %>%
mutate(`protection`=recode(`protection`,
"o1"="hand washing",
"o2"="mask",
"o3"="healthy lifestyle",
"o4"="vaccination",
"o5"="distancing")) %>%
mutate(`lockdown`=recode(`lockdown`,
"o1"="distress",
"o2"="suppression",
"o3"="inequality",
"o4"="recession",
"o5"="reduced health"))
#kable(winner)%>%
#  kable_styling(full_width = F)
stargazer::stargazer(winner,
title="Winning options of COVID-19-related questions using different voting methods. This table presents the results of four COVID-related questions (columns) that were voted upon using four different voting methods (rows): majority voting ($mv={0,1}$), combined approval voting ($cav={-1, 0, 1}$), score voting ($sv={0,1,2,3,4}$), and modified Borda count ($mbc={0,1,2,3,4}$). The winning option out of ${o_1,...,o_5}$ was determined by the highest sum of scores.",
summary = FALSE,
label = "tab:winner",
out="tables/winner_all.tex")
df_va_stts_lng %>%
filter(!vote_mechanism==" Majority Voting") %>%
mutate(question=recode(question,
"Q1"="vaccine",
"Q2"="icu",
"Q3"="protection",
"Q4"="lockdown")) %>%
group_by(short_id, vote_mechanism, question) %>%
mutate(score_scld=scales::rescale(score,to=c(0, 1))) %>%
summarize(sd=sd(score_scld), .groups = "drop_last") -> df_temp
df_temp %>%
group_by(question) %>%
summarise(median=median(sd)) %>%
arrange(median) %>%
mutate(median=round(median,digits=3))->sd_median
stargazer::stargazer(sd_median,
title="The median standard deviation of the voting results, separated by question.",
summary = FALSE, rownames = FALSE,
label = "tab:median_sd",
out="tables/median_sd.tex")
df_temp %>%
group_by(question) %>%
shapiro_test(sd) -> test_temp
df_temp %>%
ungroup() %>%
wilcox_test(sd ~ question, paired = TRUE, p.adjust.method = "holm") %>%
select(group1,group2,statistic, p.adj,p.adj.signif)->sd_wilcox
stargazer::stargazer(sd_wilcox,
title="A paired Wilcoxon signed-rank test is used to compare the standard deviation of the voting results across questions.",
summary = FALSE,
rownames = FALSE, notes.align = "l",
notes = c("The p-values are adjusted using the Holm-Bonferroni correction method.",
"$^{*}$p$<$0.05; $^{**}$p$<$0.01; $^{***}$p$<$0.001; $^{****}$p$<$1e-04."),
label = "tab:wilcox_sd",
out="tables/wilcox_sd.tex")
df_temp %>%
group_by(question) %>%
summarise(median=median(sd)) %>%
pull(median)->median_values
df_temp %>%
group_by(question) %>%
mutate(median = median(sd)) %>%
ggplot(aes(sd, group = question, color = question, linetype = question)) +
geom_density(adjust = 1.5, alpha = .2) +
geom_vline(aes(xintercept = median, color = question, linetype = question)) +
xlab("standard deviation") +
theme_classic() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
text = element_text(size = 9)) +
scale_x_continuous(breaks = median_values, labels = round(median_values, digits = 3)) +
scale_colour_manual(values = color_blind_friendly) +
scale_linetype_manual(values = c("dashed", "dotdash", "solid", "dotted"))  -> plt_sd
#Vote_mechanism<-" Combined Approval"
#Question<-"Q1"
#option_a<-"o1"
#option_b<-"o2"
df_va_stts_lng %>%
ungroup() %>%
group_by(short_id, vote_mechanism, question) %>%
mutate(score=scales::rescale(score,to=c(0, 1))) -> df_va_stts_lng_2
d_method<-function(Vote_mechanism){
d_question<-function(Question){
divisiveness <- function(option_a, option_b) {
oa_id<-df_va_stts_lng_2 %>% #all voters who assigned max_score to option_a
ungroup() %>%
select(!c(time, vote_name)) %>%
filter(., vote_mechanism ==Vote_mechanism) %>%
filter(., question ==Question) %>%
group_by(short_id)%>%
filter(score == max(score)) %>%
filter(., option ==option_a) %>%
pull(short_id)
score_o1<-df_va_stts_lng_2 %>%
ungroup() %>%
select(!c(time, vote_name)) %>%
filter(., vote_mechanism ==Vote_mechanism) %>%
filter(., question ==Question) %>%
group_by(short_id)%>%
filter(score == max(score)) %>%
filter(., option ==option_a) %>%
pull(score)
D<-df_va_stts_lng_2 %>%
ungroup() %>%
select(!c(time, vote_name)) %>%
filter(., vote_mechanism ==Vote_mechanism) %>%
filter(., question == Question) %>%
filter(., short_id %in% oa_id) %>% # only include those voters who assigned max to option_a
filter(., option ==option_b)  %>%
add_column(score_o1=score_o1) %>%
mutate(diff = abs(score_o1-score)) %>% #how did they rate option_b?
summarise(D_o1_o2=mean(diff)) %>%  #changed division
pull(D_o1_o2)
return(D)
}
D_o1_o2<-divisiveness("o1", "o2")
D_o1_o3<-divisiveness("o1", "o3")
D_o1_o4<-divisiveness("o1", "o4")
D_o1_o5<-divisiveness("o1", "o5")
D_o2_o1<-divisiveness("o2", "o1")
D_o2_o3<-divisiveness("o2", "o3")
D_o2_o4<-divisiveness("o2", "o4")
D_o2_o5<-divisiveness("o2", "o5")
D_o3_o1<-divisiveness("o3", "o1")
D_o3_o2<-divisiveness("o3", "o2")
D_o3_o4<-divisiveness("o3", "o4")
D_o3_o5<-divisiveness("o3", "o5")
D_o4_o1<-divisiveness("o4", "o1")
D_o4_o2<-divisiveness("o4", "o2")
D_o4_o3<-divisiveness("o4", "o3")
D_o4_o5<-divisiveness("o4", "o5")
D_o5_o1<-divisiveness("o5", "o1")
D_o5_o2<-divisiveness("o5", "o2")
D_o5_o3<-divisiveness("o5", "o3")
D_o5_o4<-divisiveness("o5", "o4")
D_Q<-c(D_o1_o2,D_o1_o3,D_o1_o4,D_o1_o5,
D_o2_o1,D_o2_o3,D_o2_o4,D_o2_o5,
D_o3_o1,D_o3_o2,D_o3_o4,D_o3_o5,
D_o4_o1,D_o4_o2,D_o4_o3,D_o4_o5,
D_o5_o1,D_o5_o2,D_o5_o3,D_o5_o4)
return(D_Q)
}
Q1<-d_question("Q1")
Q2<-d_question("Q2")
Q3<-d_question("Q3")
Q4<-d_question("Q4")
D_Q_all<-cbind(Q1, Q2, Q3, Q4)
return(D_Q_all)
}
df_divisiveness<-rbind(
as.data.frame(d_method(" Majority Voting")) %>%
pivot_longer(cols = starts_with("Q"),
names_to = "question", values_to = "divisiveness") %>%
add_column(method = rep("Majority Voting",each=80)),
as.data.frame(d_method(" Combined Approval")) %>%
pivot_longer(cols = starts_with("Q"),
names_to = "question", values_to = "divisiveness") %>%
add_column(method = rep("Combined Approval",each=80)),
as.data.frame(d_method(" Score Voting")) %>%
pivot_longer(cols = starts_with("Q"),
names_to = "question", values_to = "divisiveness") %>%
add_column(method = rep("Score Voting",each=80)),
as.data.frame(d_method(" Modified Borda Count")) %>%
pivot_longer(cols = starts_with("Q"),
names_to = "question", values_to = "divisiveness") %>%
add_column(method = rep("Modified Borda Count",each=80))
)
df_divisiveness%>%
filter(!method=="Majority Voting")%>%
mutate(question=recode_factor(question,
"Q1"="vaccine",
"Q2"="icu",
"Q3"="protection",
"Q4"="lockdown"), ordered=TRUE) %>%
ungroup() %>%
group_by(question)%>%
summarise(median=round(median(divisiveness),digits=3)) %>%
#  mutate(question=character(question))%>%
arrange(median) ->median_div
median_div$question<-as.character(median_div$question)
stargazer::stargazer(median_div,
title="The median divisiveness of the voting results, separated by question.",
summary = FALSE,
rownames = FALSE,
label = "tab:median_divisiveness",
out="tables/median_divisiveness.tex")
df_divisiveness%>%
mutate(question=recode_factor(question,
"Q1"="vaccine",
"Q2"="icu",
"Q3"="protection",
"Q4"="lockdown"), ordered=TRUE) %>%
filter(!method=="Majority Voting") %>%
wilcox_test(divisiveness ~ question, paired = TRUE, p.adjust.method = "holm") %>%
add_significance()%>%
select(group1,group2,statistic, p.adj,p.adj.signif)->div_wilcox
colnames(div_wilcox)<-c("question I", "question II", "statistic", "p.adj",	"signif")
#kable(div_wilcox)%>%
#  kable_styling(full_width = F)
stargazer::stargazer(div_wilcox,
title="A paired Wilcoxon signed-rank test is used to compare the Divisiveness of the voting results across questions.",
rownames = FALSE, notes.align = "l",
notes = c("The p-values are adjusted using the Holm-Bonferroni correction method.",
"$^{*}$p$<$0.05; $^{**}$p$<$0.01; $^{***}$p$<$0.001; $^{****}$p$<$1e-04."),
summary = FALSE,
label = "tab:wilcox_divisiveness",
out="tables/wilcox_divisiveness.tex")
df_divisiveness%>%
filter(!method=="Majority Voting")%>%
group_by(question)%>%
summarise(median=median(divisiveness)) %>%
pull(median)->median_values
median_values_breaks<-median_values
median_values_breaks[4]<-median_values_breaks[4]-0.01
median_values_breaks[3]<-median_values_breaks[3]+0.01
df_divisiveness%>%
filter(!method=="Majority Voting")%>%
mutate(question=recode(question,
"Q1"="vaccine",
"Q2"="icu",
"Q3"="protection",
"Q4"="lockdown")) %>%
group_by(question)%>%
mutate(median=median(divisiveness)) %>%
ggplot(aes(divisiveness, group=question, color=question, linetype = question)) +
geom_density(adjust=1.5, alpha=.2)+xlab("divisiveness") +
geom_vline(aes(xintercept=median, color=question,linetype = question)) +
theme_classic() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
text=element_text(size=9)) +
scale_x_continuous(breaks = median_values_breaks, labels = round(median_values, digits = 3))+
scale_colour_manual(values = color_blind_friendly)+
scale_linetype_manual(values = c("dashed", "dotdash", "solid", "dotted"))  ->plt_divisiveness
ggarrange(plt_sd , plt_divisiveness,
ncol=2, common.legend = TRUE, legend = "bottom",widths=c(1,1,1)) %>%
ggexport(filename = "figures/spread.pdf",width = 8, height = 4)
df_va_stts_lng%>%
ungroup()%>%
select(short_id, question, vote_mechanism, option, score) %>%
mutate(vote_mechanism = recode_factor(vote_mechanism,
" Majority Voting" = "mv",
" Combined Approval" = "cav",
" Score Voting" = "sv",
" Modified Borda Count" = "mbc"),
ordered=TRUE) %>%
group_by(short_id, question, vote_mechanism) %>%
mutate(score_scld=scales::rescale(score,to=c(0, 1))) %>%
unite(id_q, c("short_id", "question"), remove = TRUE) %>%
# select("id_q", "vote_mechanism","option","score_scld") %>%
filter(id_q=="13586_Q1") %>%
ggplot(.,aes(x=vote_mechanism, y=score_scld, group=option, color=option)) +
geom_point(size=1)+
geom_line(aes(group = option))+
geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = 0.95, ymax = 1.05), colour="yellow", fill="yellow", alpha=0.01) +
ylab("scores, rescaled") + xlab("voting method") +
theme_classic() +
theme(legend.position = "bottom",
text=element_text(size=12)) +
scale_colour_manual(values = color_blind_friendly)-> full
df_va_stts_lng%>%
ungroup()%>%
select(short_id, question, vote_mechanism, option, score) %>%
mutate(vote_mechanism = recode_factor(vote_mechanism,
" Majority Voting" = "mv",
" Combined Approval" = "cav",
" Score Voting" = "sv",
" Modified Borda Count" = "mbc"), ordered=TRUE) %>%
group_by(short_id, question, vote_mechanism) %>%
filter(score == max(score)) %>%
group_by(short_id, question) %>%
add_count(option) %>%
mutate(option_f=as.numeric(fct_infreq(option))) %>% #option_f was used as y=option_f for plotting
filter(!any(n==4)) %>%
unite(id_q, c("short_id", "question"), remove = FALSE) %>%
filter(id_q=="13586_Q3") ->consistency
consistency %>%
ggplot(.,aes(x=vote_mechanism, y=option, group=option,  color=option)) +
geom_point(size=5, shape="1") +
annotate("text", x = 1, y = 5, label = c("0"), alpha=.2) +
annotate("text", x = 4, y = 5, label = c("0"), alpha=.2) +
annotate("text", x = 4, y = 4, label = c("0"), alpha=.2) +
annotate("text", x = 1, y = 3, label = c("0"), alpha=.2) +
annotate("text", x = 2, y = 3, label = c("0"), alpha=.2) +
annotate("text", x = 3, y = 3, label = c("0"), alpha=.2) +
annotate("text", x = 1, y = 2, label = c("0"), alpha=.2) +
annotate("text", x = 4, y = 2, label = c("0"), alpha=.2) +
annotate("text", x = 1, y = 1, label = c("0"), alpha=.2) +
annotate("text", x = 4, y = 1, label = c("0"), alpha=.2) +
xlab("voting method") + ylab("option") +
theme_classic() +
theme(legend.position = "none",
text=element_text(size=12))+
scale_colour_manual(values = color_blind_friendly)->first_der
ggarrange(full, first_der, ncol=2,common.legend = TRUE, legend = "bottom") %>%
ggexport(filename = "figures/first_derivative.pdf", width = 8, height = 4)
df_lng_clr<-df %>%
select(short_id,legitimacy_1_1,legitimacy_1_2,legitimacy_1_3,legitimacy_1_4) %>%
rename("majority vote" = "legitimacy_1_1",
"combined approval" = "legitimacy_1_2",
"score" = "legitimacy_1_3",
"MBC" = "legitimacy_1_4")%>%
filter(!short_id %in% incomplete) %>% #not every participant answered all votes
pivot_longer(names_to = "which_method",
cols = 2:5,
values_to = "rating_clr",
values_drop_na = TRUE)  %>%
mutate(which_method = recode_factor(which_method,
"majority vote" = "mv",
"combined approval" = "cav",
"score" = "sv",
"MBC" = "mbc"), ordered=TRUE) %>%
mutate(rating_clr=recode(rating_clr,
`stronlgy disagree`=0,
`somewhat disagree`=1,
`neutral`=2,
`somewhat agree`=3,
`strongly agree`=4, .default = NaN))
df_lng_cvd<- df %>%
select(short_id,legitimacy_2_1,legitimacy_2_2,legitimacy_2_3,legitimacy_2_4) %>%
rename("majority vote" = "legitimacy_2_1",
"combined approval" = "legitimacy_2_2",
"score" = "legitimacy_2_3",
"MBC" = "legitimacy_2_4") %>%
filter(!short_id %in% incomplete) %>% #not every participant answered all votes
pivot_longer(names_to = "which_method",
cols = 2:5,
values_to = "rating_cvd",
values_drop_na = TRUE) %>%
mutate(which_method = recode_factor(which_method,
"majority vote" = "mv",
"combined approval" = "cav",
"score" = "sv",
"MBC" = "mbc"), ordered=TRUE) %>%
mutate(rating_cvd=recode(rating_cvd,
`stronlgy disagree`=0,
`somewhat disagree`=1,
`neutral`=2,
`somewhat agree`=3,
`strongly agree`=4, .default = NaN))
View(df_lng_cvd)
write.csv(file="df_legitimacy.csv")
df_lng_cvd<- df %>%
select(short_id,legitimacy_2_1,legitimacy_2_2,legitimacy_2_3,legitimacy_2_4) %>%
rename("majority vote" = "legitimacy_2_1",
"combined approval" = "legitimacy_2_2",
"score" = "legitimacy_2_3",
"MBC" = "legitimacy_2_4") %>%
filter(!short_id %in% incomplete) %>% #not every participant answered all votes
pivot_longer(names_to = "which_method",
cols = 2:5,
values_to = "rating_cvd",
values_drop_na = TRUE) %>%
mutate(which_method = recode_factor(which_method,
"majority vote" = "mv",
"combined approval" = "cav",
"score" = "sv",
"MBC" = "mbc"), ordered=TRUE) %>%
mutate(rating_cvd=recode(rating_cvd,
`stronlgy disagree`=0,
`somewhat disagree`=1,
`neutral`=2,
`somewhat agree`=3,
`strongly agree`=4, .default = NaN)) %>%
write.csv(file="df_legitimacy.csv")
